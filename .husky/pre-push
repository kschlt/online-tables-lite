#!/bin/bash

# Pre-push hook for Online Tables Lite (Husky)
# Updates docs and creates PR when pushing feature branches

set -e  # Exit on any error

# Get current branch and remote info
BRANCH=$(git rev-parse --abbrev-ref HEAD)
REMOTE=$1
URL=$2

echo "üöÄ Pre-push hook: Branch '$BRANCH' pushing to '$REMOTE'"

# Skip hook for protected branches (these should go through PR process anyway)
if [[ "$BRANCH" == "main" || "$BRANCH" == "production" ]]; then
    echo "‚ÑπÔ∏è  Skipping pre-push hook for protected branch '$BRANCH'"
    exit 0
fi

# Skip if not pushing to origin (might be pushing to different remote)
if [[ "$REMOTE" != "origin" ]]; then
    echo "‚ÑπÔ∏è  Skipping pre-push hook for remote '$REMOTE' (not origin)"
    exit 0
fi

# Check if we're in the correct directory (project root)
if [ ! -f "Makefile" ]; then
    echo "‚ùå Error: Not in project root directory. Pre-push hook expects to run from project root."
    exit 1
fi

echo "üìö Running documentation update and PR creation workflow..."

# 1. Lightweight verification - quality guaranteed by pre-commit hook
echo "‚úÖ Quality checks guaranteed by pre-commit hook - focusing on changelog automation"

# Check if cached commit metadata is available for verification
CACHE_FILE=".git/commit-cache/last-commit-meta"
if [ -f "$CACHE_FILE" ]; then
    echo "‚ö° Using cached commit data for verification"
    . "$CACHE_FILE"
    if [ -n "$CH_CODE" ]; then
        echo "üìù Code changes detected - agent should have run documentation updates"
        echo "üí° If you're a human user and haven't run 'make ship', please run it first"
    else
        echo "‚úÖ No significant code changes detected"
    fi
else
    echo "üîç No commit cache - performing lightweight verification..."
    BASE=$(git merge-base origin/main HEAD 2>/dev/null || git rev-list --max-parents=0 HEAD | tail -n1)
    CODE_CHANGES=$(git diff --name-only $BASE...HEAD -- 'apps/**' 'supabase/**' 'scripts/**' 2>/dev/null | grep -v -E '\.(md|txt)$' | wc -l || echo "0")
    if [ "$CODE_CHANGES" -gt 0 ]; then
        echo "üìù Code changes detected - agent should have run documentation updates"
        echo "üí° If you're a human user and haven't run 'make ship', please run it first"
    else
        echo "‚úÖ No significant code changes detected"
    fi
fi

# 2. Auto-update changelog if git-cliff is available and configured
if command -v git-cliff >/dev/null 2>&1 && [ -f "cliff.toml" ]; then
    echo "üìù Auto-updating CHANGELOG.md with git-cliff..."
    
    # Generate the updated changelog
    CHANGELOG_UPDATED=false
    if git-cliff --unreleased --prepend CHANGELOG.md 2>/dev/null; then
        # Check if CHANGELOG.md was actually modified
        if ! git diff --quiet CHANGELOG.md 2>/dev/null; then
            echo "‚úÖ CHANGELOG.md updated with new entries"
            git add CHANGELOG.md
            
            # Create a separate commit for changelog updates instead of amending
            git commit -m "docs: update CHANGELOG.md with latest changes" --no-verify
            echo "‚úÖ CHANGELOG.md changes committed separately"
            CHANGELOG_UPDATED=true
        else
            echo "‚ÑπÔ∏è  CHANGELOG.md already up to date"
        fi
    else
        echo "‚ö†Ô∏è  Could not update CHANGELOG.md with git-cliff"
    fi
    
    if [ "$CHANGELOG_UPDATED" = true ]; then
        echo "üìù Changelog updated automatically during push"
    fi
else
    echo "‚ÑπÔ∏è  git-cliff not available or not configured, skipping changelog auto-update"
fi

# 3. The actual push will happen after this hook completes successfully
echo "‚úÖ Pre-push verification complete!"
echo "üì§ Push will proceed..."