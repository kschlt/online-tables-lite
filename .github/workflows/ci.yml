name: CI/CD Pipeline

on:
  push:
    branches: [ production ]            # deploy only after PR merge into production
  pull_request:
    branches: [ main, production ]      # run Quality Checks on PRs to main & production

permissions:
  contents: read
  deployments: write

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  quality-checks:
    name: Quality Checks
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      # Web App Quality Checks
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          # Temporarily disable cache to debug type issues
          # cache: 'npm'
          # cache-dependency-path: apps/web/package-lock.json
      
      - name: Cache Next.js build
        uses: actions/cache@v4
        with:
          path: |
            apps/web/.next/cache
            apps/web/node_modules/.cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('apps/web/package-lock.json') }}-${{ hashFiles('apps/web/**/*.{js,ts,tsx,jsx}') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('apps/web/package-lock.json') }}-
            ${{ runner.os }}-nextjs-
      
      - name: Web App Quality Checks
        working-directory: apps/web
        run: |
          echo "🔍 Clearing npm cache and node_modules..."
          rm -rf node_modules
          
          echo "🔍 Debugging package.json and package-lock.json..."
          echo "=== PACKAGE.JSON ==="
          cat package.json | grep -A 10 -B 5 "@types/node"
          echo "=== PACKAGE-LOCK.JSON ==="
          grep -A 5 -B 5 "@types/node" package-lock.json || echo "No @types/node found in package-lock.json"
          
          echo "🔍 Debugging npm configuration..."
          echo "=== NPM CONFIG ==="
          npm config list
          echo "=== NPM VERSION ==="
          npm --version
          echo "=== NODE VERSION ==="
          node --version
          
          echo "🔍 Installing dependencies..."
          npm ci --verbose
          
          echo "⏳ Waiting for installation to complete..."
          sleep 2
          
          echo "🔍 Verifying Node.js types installation..."
          echo "=== NPM LIST @TYPES/NODE ==="
          npm list @types/node || echo "npm list failed, checking alternative methods..."
          echo "=== CHECKING NODE_MODULES DIRECTORY ==="
          ls -la node_modules/@types/ | grep node || echo "No @types/node directory found"
          echo "=== CHECKING INSTALLED PACKAGES ==="
          npm list --depth=0 | grep "@types/node" || echo "No @types/node in npm list"
          echo "=== CHECKING PACKAGE.JSON DEV DEPENDENCIES ==="
          grep -A 20 '"devDependencies"' package.json | grep "@types/node" || echo "@types/node not found in package.json devDependencies"
          echo "=== VERIFYING TYPESCRIPT CAN FIND TYPES ==="
          npx tsc --showConfig | grep -i "types" || echo "TypeScript config check failed"
          
          echo "🔍 Running TypeScript type check..."
          npm run typecheck
          
          echo "🔍 Running ESLint check..."
          npm run lint
          
          echo "🔍 Running Prettier format check..."
          npm run format:check
          
          echo "🔍 Running build check..."
          npm run build
          
          echo "✅ Web app quality checks passed!"
        env:
          # Enable Next.js build caching
          NEXT_TELEMETRY_DISABLED: 1
          NODE_ENV: production
          # Ensure TypeScript can find Node.js types
          TS_NODE_TYPES: node
          NODE_OPTIONS: --max-old-space-size=4096
      
      # API Quality Checks
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: apps/api/requirements.txt
      
      - name: API Quality Checks
        working-directory: apps/api
        run: |
          echo "🔍 Installing dependencies..."
          pip install -r requirements.txt
          
          echo "🔍 Running Ruff linting..."
          ruff check .
          
          echo "🔍 Running Ruff formatting check..."
          ruff format --check .
          
          echo "🔍 Running API structure validation..."
          python -c "import app; print('✅ API structure validation passed')"
          
          echo "✅ API quality checks passed!"
      
      - name: Quality Checks Summary
        run: |
          echo ""
          echo "✅ ALL QUALITY CHECKS PASSED!"
          echo "✅ Web App: TypeScript ✓ ESLint ✓ Prettier ✓ Build ✓"
          echo "✅ API: Ruff Linting ✓ Ruff Formatting ✓ Structure ✓"
          echo ""

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: quality-checks
    if: github.ref == 'refs/heads/production' && github.event_name == 'push'
    
    environment: 
      name: production
      url: https://online-tables-lite.vercel.app
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      # Create deployment and export its ID to ENV (linter-friendly)
      - name: Create GitHub Deployment
        id: create_deployment
        uses: actions/github-script@v7
        with:
          script: |
            const d = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,  // Use commit SHA instead of branch ref to avoid merge conflicts
              environment: 'production',
              description: 'Production deployment',
              required_contexts: []  // allow deployment without status checks gating
            });
            core.exportVariable('DEPLOYMENT_ID', String(d.data.id));

      # Deploy API to Fly.io (backend first)
      - name: Deploy API to Fly.io
        id: deploy_api
        working-directory: apps/api
        run: |
          echo "🚀 Deploying API to Fly.io..."
          
          # Install Fly.io CLI
          curl -L https://fly.io/install.sh | sh
          export PATH="$PATH:$HOME/.fly/bin"
          
          # Validate Fly.io configuration
          echo "🔍 Validating Fly.io configuration..."
          if ! flyctl config validate; then
            echo "❌ Fly.io configuration validation failed"
            exit 1
          fi
          
          # Check if app exists and is accessible
          echo "🔍 Checking app status..."
          if ! flyctl status --json > /dev/null 2>&1; then
            echo "❌ Cannot access Fly.io app"
            exit 1
          fi
          
          # Deploy with enhanced error handling
          echo "🚀 Starting deployment..."
          if flyctl deploy --remote-only --strategy rolling --ha=false; then
            echo "✅ API deployed to Fly.io successfully!"
          else
            echo "❌ API deployment failed"
            exit 1
          fi
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
      
      - name: Health Check API
        id: api_health
        run: |
          echo "🔍 Checking API health..."
          
          # Wait for deployment to stabilize with exponential backoff
          echo "⏳ Waiting for deployment to stabilize..."
          sleep 30
          
          # Enhanced health check with better error reporting
          API_URL="https://online-table-lite-api.fly.dev"
          MAX_ATTEMPTS=15
          ATTEMPT=1
          
          while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
            echo "⏳ API health check attempt $ATTEMPT/$MAX_ATTEMPTS..."
            
            # Test basic connectivity
            if curl -f -s --max-time 15 --connect-timeout 10 "$API_URL/healthz" > /dev/null 2>&1; then
              echo "✅ API health check passed!"
              
              # Additional validation - check if response is valid JSON
              HEALTH_RESPONSE=$(curl -f -s --max-time 10 "$API_URL/healthz" 2>/dev/null)
              if echo "$HEALTH_RESPONSE" | jq -e '.status' > /dev/null 2>&1; then
                echo "✅ API health response is valid JSON"
                echo "api_healthy=true" >> $GITHUB_OUTPUT
                break
              else
                echo "⚠️ API responded but health check format is invalid"
                echo "Response: $HEALTH_RESPONSE"
              fi
            else
              echo "❌ API health check attempt $ATTEMPT failed"
              
              # Show more diagnostic info on failure
              echo "🔍 Diagnostic information:"
              echo "  - Testing connectivity to $API_URL"
              curl -v --max-time 5 "$API_URL/healthz" 2>&1 | head -10 || true
            fi
            
            if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
              echo "❌ API health check failed after $MAX_ATTEMPTS attempts"
              echo "api_healthy=false" >> $GITHUB_OUTPUT
              exit 1
            fi
            
            # Exponential backoff: 15s, 30s, 45s, 60s, then 60s intervals
            WAIT_TIME=$((15 * ATTEMPT))
            if [ $WAIT_TIME -gt 60 ]; then WAIT_TIME=60; fi
            echo "⏳ Waiting ${WAIT_TIME}s before next attempt..."
            sleep $WAIT_TIME
            ATTEMPT=$((ATTEMPT + 1))
          done
      
      - name: Rollback API on Health Check Failure
        if: steps.api_health.outputs.api_healthy == 'false'
        working-directory: apps/api
        run: |
          echo "🔄 Rolling back API deployment..."
          
          # Install Fly.io CLI
          curl -L https://fly.io/install.sh | sh
          export PATH="$PATH:$HOME/.fly/bin"
          
          # Get previous release version
          echo "🔍 Finding previous release..."
          PREVIOUS_RELEASE=$(flyctl releases list --json | jq -r '.[1].Version' 2>/dev/null)
          
          if [ -n "$PREVIOUS_RELEASE" ] && [ "$PREVIOUS_RELEASE" != "null" ]; then
            echo "🔄 Rolling back to release: $PREVIOUS_RELEASE"
            if flyctl releases rollback "$PREVIOUS_RELEASE" --yes; then
              echo "✅ API rolled back to previous version successfully"
              
              # Wait a bit and verify rollback
              echo "⏳ Waiting for rollback to stabilize..."
              sleep 30
              
              # Quick health check of rolled back version
              if curl -f -s --max-time 10 https://online-table-lite-api.fly.dev/healthz > /dev/null 2>&1; then
                echo "✅ Rollback verification successful"
              else
                echo "⚠️ Rollback completed but health check failed"
              fi
            else
              echo "❌ Rollback failed"
              exit 1
            fi
          else
            echo "❌ No previous release found for rollback"
            echo "🔍 Available releases:"
            flyctl releases list --json | jq -r '.[] | "\(.Version) - \(.CreatedAt)"' || true
            exit 1
          fi
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
      
      # Deploy Web App to Vercel (only after API is healthy)
      - name: Setup Node.js for Deployment
        if: steps.api_health.outputs.api_healthy == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: apps/web/package-lock.json
      
      - name: Cache Next.js build for deployment
        if: steps.api_health.outputs.api_healthy == 'true'
        uses: actions/cache@v4
        with:
          path: |
            apps/web/.next/cache
            apps/web/node_modules/.cache
          key: ${{ runner.os }}-nextjs-deploy-${{ hashFiles('apps/web/package-lock.json') }}-${{ hashFiles('apps/web/**/*.{js,ts,tsx,jsx}') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-deploy-${{ hashFiles('apps/web/package-lock.json') }}-
            ${{ runner.os }}-nextjs-deploy-
      
      - name: Deploy Web App to Vercel
        id: deploy_web
        if: steps.api_health.outputs.api_healthy == 'true'
        working-directory: apps/web
        run: |
          echo "🚀 Deploying web app to Vercel..."
          
          # Install dependencies with clean cache
          npm ci
          
          # Build with Next.js optimizations
          echo "🔨 Building Next.js application..."
          npm run build
          
          # Install Vercel CLI
          npm install --global vercel@latest
          
          # Deploy to Vercel
          echo "🚀 Deploying to Vercel..."
          vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
          vercel deploy --prod --token=${{ secrets.VERCEL_TOKEN }}
          
          echo "✅ Web app deployed to Vercel!"
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          # Next.js optimizations
          NEXT_TELEMETRY_DISABLED: 1
          NODE_ENV: production
          # Skip dev tools in CI
          CI: true
      
      - name: Verify Web App Deployment
        id: web_deployment
        if: steps.api_health.outputs.api_healthy == 'true'
        run: |
          echo "🔍 Verifying web app deployment..."
          sleep 30  # Wait for deployment to stabilize
          
          # Simple verification that the app is accessible
          if curl -f -s --max-time 10 https://online-tables-lite.vercel.app/en > /dev/null; then
            echo "✅ Web app is accessible and deployed successfully!"
            echo "web_deployed=true" >> $GITHUB_OUTPUT
          else
            echo "❌ Web app deployment verification failed"
            echo "web_deployed=false" >> $GITHUB_OUTPUT
            exit 1
          fi
      
      - name: Rollback Web App on Deployment Failure
        if: steps.web_deployment.outputs.web_deployed == 'false'
        working-directory: apps/web
        run: |
          echo "🔄 Rolling back web app deployment..."
          npm install --global vercel@latest
          vercel rollback --yes --token=${{ secrets.VERCEL_TOKEN }}
          echo "✅ Web app rolled back to previous version"
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      
      - name: Update deployment status - Success
        if: steps.api_health.outputs.api_healthy == 'true' && steps.web_deployment.outputs.web_deployed == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: process.env.DEPLOYMENT_ID,
              state: 'success',
              description: 'Production deployment successful',
              environment_url: 'https://online-tables-lite.vercel.app'
            });
      
      - name: Update deployment status - Failure
        if: steps.api_health.outputs.api_healthy == 'false' || steps.web_deployment.outputs.web_deployed == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: process.env.DEPLOYMENT_ID,
              state: 'failure',
              description: 'Production deployment failed - rollback completed'
            });
      
      - name: Deployment Complete
        if: steps.api_health.outputs.api_healthy == 'true' && steps.web_deployment.outputs.web_deployed == 'true'
        run: |
          echo ""
          echo "🎉 PRODUCTION DEPLOYMENT COMPLETE!"
          echo "✅ API deployed to Fly.io: https://online-table-lite-api.fly.dev"
          echo "✅ Web app deployed to Vercel: https://online-tables-lite.vercel.app"
          echo ""
          echo "🌐 Applications are now live in production!"
      
      - name: Deployment Failed
        if: steps.api_health.outputs.api_healthy == 'false' || steps.web_deployment.outputs.web_deployed == 'false'
        run: |
          echo ""
          echo "❌ PRODUCTION DEPLOYMENT FAILED!"
          echo "↩️ Rollback completed - previous versions restored"
          echo ""
          echo "Please check the logs and fix issues before retrying."
          exit 1
