name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main, production ]

permissions:
  contents: read
  deployments: write

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  quality-checks:
    name: Quality Checks
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      # Web App Quality Checks
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: apps/web/package-lock.json
      
      - name: Web App Quality Checks
        working-directory: apps/web
        run: |
          echo "üîç Installing dependencies..."
          npm ci
          
          echo "üîç Running TypeScript type check..."
          npm run typecheck
          
          echo "üîç Running ESLint check..."
          npm run lint
          
          echo "üîç Running Prettier format check..."
          npm run format:check
          
          echo "üîç Running build check..."
          npm run build
          
          echo "‚úÖ Web app quality checks passed!"
      
      # API Quality Checks
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: apps/api/requirements.txt
      
      - name: API Quality Checks
        working-directory: apps/api
        run: |
          echo "üîç Installing dependencies..."
          pip install -r requirements.txt
          
          echo "üîç Running Ruff linting..."
          ruff check .
          
          echo "üîç Running Ruff formatting check..."
          ruff format --check .
          
          echo "üîç Running API structure validation..."
          python -c "import app; print('‚úÖ API structure validation passed')"
          
          echo "‚úÖ API quality checks passed!"
      
      - name: Quality Checks Summary
        run: |
          echo ""
          echo "ÔøΩÔøΩ ALL QUALITY CHECKS PASSED!"
          echo "‚úÖ Web App: TypeScript ‚úì ESLint ‚úì Prettier ‚úì Build ‚úì"
          echo "‚úÖ API: Ruff Linting ‚úì Ruff Formatting ‚úì Structure ‚úì"
          echo ""

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: quality-checks
    if: github.ref == 'refs/heads/production' && github.event_name == 'push'
    
    environment: 
      name: production
      url: https://online-table-lite.vercel.app
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Create deployment
        id: create_deployment
        uses: actions/github-script@v7
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.ref,
              environment: 'production',
              description: 'Production deployment',
              required_contexts: []
            });
            core.setOutput('deployment_id', deployment.data.id);
      
      # Deploy API to Fly.io (First - backend must be ready)
      - name: Deploy API to Fly.io
        id: deploy_api
        working-directory: apps/api
        run: |
          echo "üöÄ Deploying API to Fly.io..."
          
          # Install Flyctl (latest version)
          curl -L https://fly.io/install.sh | sh
          export PATH="$PATH:$HOME/.fly/bin"
          
          # Deploy with rolling strategy and health checks
          flyctl deploy --remote-only --strategy rolling --ha=false
          
          echo "‚úÖ API deployed to Fly.io!"
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
      
      - name: Health Check API
        id: api_health
        run: |
          echo "üîç Checking API health..."
          sleep 30  # Wait for deployment to stabilize
          
          for i in {1..10}; do
            echo "‚è≥ API health check attempt $i/10..."
            if curl -f -s --max-time 10 https://online-table-lite-api.fly.dev/healthz\; then
              echo "‚úÖ API health check passed!"
              echo "api_healthy=true" >> $GITHUB_OUTPUT
              break
            else
              echo "‚ùå API health check attempt $i failed"
              if [ $i -eq 10 ]; then
                echo "‚ùå API health check failed after 10 attempts"
                echo "api_healthy=false" >> $GITHUB_OUTPUT
                exit 1
              fi
              sleep 15
            fi
          done
      
      - name: Rollback API on Health Check Failure
        if: steps.api_health.outputs.api_healthy == 'false'
        working-directory: apps/api
        run: |
          echo "üîÑ Rolling back API deployment..."
          curl -L https://fly.io/install.sh | sh
          export PATH="$PATH:$HOME/.fly/bin"
          
          # Rollback to previous release
          flyctl releases list --json | jq -r '.[1].Version' | xargs -I {} flyctl releases rollback {} --yes
          
          echo "‚úÖ API rolled back to previous version"
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
      
      # Deploy Web App to Vercel (Only after API is healthy)
      - name: Setup Node.js for Deployment
        if: steps.api_health.outputs.api_healthy == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: apps/web/package-lock.json
      
      - name: Deploy Web App to Vercel
        id: deploy_web
        if: steps.api_health.outputs.api_healthy == 'true'
        working-directory: apps/web
        run: |
          echo "üöÄ Deploying web app to Vercel..."
          
          # Install dependencies and build
          npm ci
          npm run build
          
          # Install Vercel CLI (latest version)
          npm install --global vercel@latest
          
          # Modern Vercel deployment pattern
          vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
          vercel deploy --prod --token=${{ secrets.VERCEL_TOKEN }}
          
          echo "‚úÖ Web app deployed to Vercel!"
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      
      - name: Health Check Web App
        id: web_health
        if: steps.api_health.outputs.api_healthy == 'true'
        run: |
          echo "üîç Checking web app health..."
          sleep 30  # Wait for deployment to stabilize
          
          for i in {1..10}; do
            echo "‚è≥ Web app health check attempt $i/10..."
            if curl -f -s --max-time 10 https://online-table-lite.vercel.app\; then
              echo "‚úÖ Web app health check passed!"
              echo "web_healthy=true" >> $GITHUB_OUTPUT
              break
            else
              echo "‚ùå Web app health check attempt $i failed"
              if [ $i -eq 10 ]; then
                echo "‚ùå Web app health check failed after 10 attempts"
                echo "web_healthy=false" >> $GITHUB_OUTPUT
                exit 1
              fi
              sleep 15
            fi
          done
      
      - name: Rollback Web App on Health Check Failure
        if: steps.web_health.outputs.web_healthy == 'false'
        working-directory: apps/web
        run: |
          echo "üîÑ Rolling back web app deployment..."
          npm install --global vercel@latest
          
          # Rollback to previous deployment
          vercel rollback --yes --token=${{ secrets.VERCEL_TOKEN }}
          
          echo "‚úÖ Web app rolled back to previous version"
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      
      - name: Update deployment status - Success
        if: steps.api_health.outputs.api_healthy == 'true' && steps.web_health.outputs.web_healthy == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              # GitHub Actions linter: deployment_id is guaranteed to exist from create_deployment step
              deployment_id: ${{ steps.create_deployment.outputs.deployment_id }},
              state: 'success',
              description: 'Production deployment successful',
              environment_url: 'https://online-table-lite.vercel.app'
            });
      
      - name: Update deployment status - Failure
        if: steps.api_health.outputs.api_healthy == 'false' || steps.web_health.outputs.web_healthy == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              # GitHub Actions linter: deployment_id is guaranteed to exist from create_deployment step
              deployment_id: ${{ steps.create_deployment.outputs.deployment_id }},
              state: 'failure',
              description: 'Production deployment failed - rollback completed'
            });
      
      - name: Deployment Complete
        if: steps.api_health.outputs.api_healthy == 'true' && steps.web_health.outputs.web_healthy == 'true'
        run: |
          echo ""
          echo "üéâ PRODUCTION DEPLOYMENT COMPLETE!"
          echo "‚úÖ API deployed to Fly.io: https://online-table-lite-api.fly.dev"
          echo "‚úÖ Web app deployed to Vercel: https://online-table-lite.vercel.app"
          echo ""
          echo "üåê Applications are now live in production!"
      
      - name: Deployment Failed
        if: steps.api_health.outputs.api_healthy == 'false' || steps.web_health.outputs.web_healthy == 'false'
        run: |
          echo ""
          echo "‚ùå PRODUCTION DEPLOYMENT FAILED!"
          echo "ÔøΩÔøΩ Rollback completed - previous versions restored"
          echo ""
          echo "Please check the logs and fix issues before retrying."
          exit 1
