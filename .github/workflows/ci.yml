name: CI/CD Pipeline

on:
  push:
    branches: [ production ]            # deploy only after PR merge into production
  pull_request:
    branches: [ main, production ]      # run Quality Checks on PRs to main & production

permissions:
  contents: read
  deployments: write

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  quality-checks:
    name: Quality Checks
    runs-on: ubuntu-latest
    env:
      NODE_ENV: development   # ensure devDependencies are available for checks
      CI: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Web App Quality Checks
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: apps/web/package-lock.json

      - name: Cache Next.js build
        uses: actions/cache@v4
        with:
          path: |
            apps/web/.next/cache
            apps/web/node_modules/.cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('apps/web/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-
            ${{ runner.os }}-

      - name: Debug npm env/config
        working-directory: apps/web
        run: |
          echo "NODE_ENV=$NODE_ENV"
          node -v
          npm -v
          npm config list -l | grep -E 'omit|production|userconfig|globalconfig' || true

      - name: Web App Quality Checks
        working-directory: apps/web
        run: |
          echo "üîç Installing dependencies (incl. dev)..."
          npm ci --include=dev

          echo "üîé Verifying @types/node presence..."
          npm ls @types/node || true

          echo "üîç Running TypeScript type check..."
          npm run typecheck

          echo "üîç Running ESLint check..."
          npm run lint

          echo "üîç Running Prettier format check..."
          npm run format:check

          echo "üîç Running build check (production)..."
          NODE_ENV=production npm run build

          echo "‚úÖ Web app quality checks passed!"
        env:
          NEXT_TELEMETRY_DISABLED: 1
          # keep NODE_ENV=development for tooling; production only for the build line above

      # API Quality Checks
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: apps/api/requirements.txt

      - name: API Quality Checks
        working-directory: apps/api
        run: |
          echo "üîç Installing dependencies..."
          pip install -r requirements.txt

          echo "üîç Running Ruff linting..."
          ruff check .

          echo "üîç Running Ruff formatting check..."
          ruff format --check .

          echo "üîç Running API structure validation..."
          python -c "import app; print('‚úÖ API structure validation passed')"

          echo "‚úÖ API quality checks passed!"

      - name: Quality Checks Summary
        run: |
          echo ""
          echo "‚úÖ ALL QUALITY CHECKS PASSED!"
          echo "‚úÖ Web App: TypeScript ‚úì ESLint ‚úì Prettier ‚úì Build ‚úì"
          echo "‚úÖ API: Ruff Linting ‚úì Ruff Formatting ‚úì Structure ‚úì"
          echo ""

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: quality-checks
    if: github.ref == 'refs/heads/production' && github.event_name == 'push'

    environment:
      name: production
      url: https://online-tables-lite.vercel.app

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Create deployment and export its ID to ENV (linter-friendly)
      - name: Create GitHub Deployment
        id: create_deployment
        uses: actions/github-script@v7
        with:
          script: |
            const d = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,  // Use commit SHA instead of branch ref
              environment: 'production',
              description: 'Production deployment',
              required_contexts: []  // allow deployment without status checks gating
            });
            core.exportVariable('DEPLOYMENT_ID', String(d.data.id));

      # Deploy API to Fly.io (backend first)
      - name: Deploy API to Fly.io
        id: deploy_api
        working-directory: apps/api
        run: |
          echo "üöÄ Deploying API to Fly.io..."

          # Install Fly.io CLI
          curl -L https://fly.io/install.sh | sh
          export PATH="$PATH:$HOME/.fly/bin"

          # Validate Fly.io configuration
          echo "üîç Validating Fly.io configuration..."
          if ! flyctl config validate; then
            echo "‚ùå Fly.io configuration validation failed"
            exit 1
          fi

          # Check if app exists and is accessible
          echo "üîç Checking app status..."
          if ! flyctl status --json > /dev/null 2>&1; then
            echo "‚ùå Cannot access Fly.io app"
            exit 1
          fi

          # Deploy with enhanced error handling
          echo "üöÄ Starting deployment..."
          if flyctl deploy --remote-only --strategy rolling --ha=false; then
            echo "‚úÖ API deployed to Fly.io successfully!"
          else
            echo "‚ùå API deployment failed"
            exit 1
          fi
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: Health Check API
        id: api_health
        run: |
          echo "üîç Checking API health..."

          # Wait for deployment to stabilize with exponential backoff
          echo "‚è≥ Waiting for deployment to stabilize..."
          sleep 30

          API_URL="https://online-table-lite-api.fly.dev"
          MAX_ATTEMPTS=15
          ATTEMPT=1

          while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
            echo "‚è≥ API health check attempt $ATTEMPT/$MAX_ATTEMPTS..."

            if curl -f -s --max-time 15 --connect-timeout 10 "$API_URL/healthz" > /dev/null 2>&1; then
              echo "‚úÖ API health check passed!"
              HEALTH_RESPONSE=$(curl -f -s --max-time 10 "$API_URL/healthz" 2>/dev/null)
              if echo "$HEALTH_RESPONSE" | jq -e '.status' > /dev/null 2>&1; then
                echo "‚úÖ API health response is valid JSON"
                echo "api_healthy=true" >> $GITHUB_OUTPUT
                break
              else
                echo "‚ö†Ô∏è API responded but health check format is invalid"
                echo "Response: $HEALTH_RESPONSE"
              fi
            else
              echo "‚ùå API health check attempt $ATTEMPT failed"
              echo "üîç Diagnostic information:"
              echo "  - Testing connectivity to $API_URL"
              curl -v --max-time 5 "$API_URL/healthz" 2>&1 | head -10 || true
            fi

            if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
              echo "‚ùå API health check failed after $MAX_ATTEMPTS attempts"
              echo "api_healthy=false" >> $GITHUB_OUTPUT
              exit 1
            fi

            WAIT_TIME=$((15 * ATTEMPT))
            if [ $WAIT_TIME -gt 60 ]; then WAIT_TIME=60; fi
            echo "‚è≥ Waiting ${WAIT_TIME}s before next attempt..."
            sleep $WAIT_TIME
            ATTEMPT=$((ATTEMPT + 1))
          done

      # Deploy Web App to Vercel (remote build; no local npm ci/build; no web health check)
      - name: Setup Node.js for Vercel CLI
        if: steps.api_health.outputs.api_healthy == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Deploy Web App to Vercel
        id: deploy_web
        if: steps.api_health.outputs.api_healthy == 'true'
        working-directory: apps/web
        run: |
          echo "üöÄ Deploying web app to Vercel (remote build)..."
          npm install --global vercel@latest

          # Pull project & env for prod (creates/updates .vercel directory)
          vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}

          # Trigger remote build & production deploy on Vercel infra
          vercel deploy --prod --token=${{ secrets.VERCEL_TOKEN }}

          echo "‚úÖ Web app deployed to Vercel (remote build)!"
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          NEXT_TELEMETRY_DISABLED: 1
          CI: true

      # Status updates (no web health check)
      - name: Update deployment status - Success
        if: steps.api_health.outputs.api_healthy == 'true' && success()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: process.env.DEPLOYMENT_ID,
              state: 'success',
              description: 'Production deployment successful',
              environment_url: 'https://online-tables-lite.vercel.app'
            });

      - name: Update deployment status - Failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: process.env.DEPLOYMENT_ID,
              state: 'failure',
              description: 'Production deployment failed'
            });

      - name: Deployment Complete
        if: steps.api_health.outputs.api_healthy == 'true' && success()
        run: |
          echo ""
          echo "üéâ PRODUCTION DEPLOYMENT COMPLETE!"
          echo "‚úÖ API deployed to Fly.io: https://online-table-lite-api.fly.dev"
          echo "‚úÖ Web app deployed to Vercel: https://online-tables-lite.vercel.app"
          echo ""
          echo "üåê Applications are now live in production!"

      - name: Deployment Failed
        if: failure()
        run: |
          echo ""
          echo "‚ùå PRODUCTION DEPLOYMENT FAILED!"
          echo ""
          echo "Please check the logs and fix issues before retrying."
          exit 1
